{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _elementType = _interopRequireDefault(require(\"prop-types-extra/lib/elementType\"));\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _Grid = _interopRequireDefault(require(\"./Grid\"));\n\nvar _NavbarBrand = _interopRequireDefault(require(\"./NavbarBrand\"));\n\nvar _NavbarCollapse = _interopRequireDefault(require(\"./NavbarCollapse\"));\n\nvar _NavbarHeader = _interopRequireDefault(require(\"./NavbarHeader\"));\n\nvar _NavbarToggle = _interopRequireDefault(require(\"./NavbarToggle\"));\n\nvar _bootstrapUtils = require(\"./utils/bootstrapUtils\");\n\nvar _StyleConfig = require(\"./utils/StyleConfig\");\n\nvar _createChainedFunction = _interopRequireDefault(require(\"./utils/createChainedFunction\")); // TODO: Remove this pragma once we upgrade eslint-config-airbnb.\n\n/* eslint-disable react/no-multi-comp */\n\n\nvar propTypes = {\n  /**\n   * Create a fixed navbar along the top of the screen, that scrolls with the\n   * page\n   */\n  fixedTop: _propTypes.default.bool,\n\n  /**\n   * Create a fixed navbar along the bottom of the screen, that scrolls with\n   * the page\n   */\n  fixedBottom: _propTypes.default.bool,\n\n  /**\n   * Create a full-width navbar that scrolls away with the page\n   */\n  staticTop: _propTypes.default.bool,\n\n  /**\n   * An alternative dark visual style for the Navbar\n   */\n  inverse: _propTypes.default.bool,\n\n  /**\n   * Allow the Navbar to fluidly adjust to the page or container width, instead\n   * of at the predefined screen breakpoints\n   */\n  fluid: _propTypes.default.bool,\n\n  /**\n   * Set a custom element for this component.\n   */\n  componentClass: _elementType.default,\n\n  /**\n   * A callback fired when the `<Navbar>` body collapses or expands. Fired when\n   * a `<Navbar.Toggle>` is clicked and called with the new `expanded`\n   * boolean value.\n   *\n   * @controllable expanded\n   */\n  onToggle: _propTypes.default.func,\n\n  /**\n   * A callback fired when a descendant of a child `<Nav>` is selected. Should\n   * be used to execute complex closing or other miscellaneous actions desired\n   * after selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`\n   * descendants exist. The callback is called with an eventKey, which is a\n   * prop from the selected `<Nav>` descendant, and an event.\n   *\n   * ```js\n   * function (\n   *  Any eventKey,\n   *  SyntheticEvent event?\n   * )\n   * ```\n   *\n   * For basic closing behavior after all `<Nav>` descendant onSelect events in\n   * mobile viewports, try using collapseOnSelect.\n   *\n   * Note: If you are manually closing the navbar using this `OnSelect` prop,\n   * ensure that you are setting `expanded` to false and not *toggling* between\n   * true and false.\n   */\n  onSelect: _propTypes.default.func,\n\n  /**\n   * Sets `expanded` to `false` after the onSelect event of a descendant of a\n   * child `<Nav>`. Does nothing if no `<Nav>` or `<Nav>` descendants exist.\n   *\n   * The onSelect callback should be used instead for more complex operations\n   * that need to be executed after the `select` event of `<Nav>` descendants.\n   */\n  collapseOnSelect: _propTypes.default.bool,\n\n  /**\n   * Explicitly set the visiblity of the navbar body\n   *\n   * @controllable onToggle\n   */\n  expanded: _propTypes.default.bool,\n  role: _propTypes.default.string\n};\nvar defaultProps = {\n  componentClass: 'nav',\n  fixedTop: false,\n  fixedBottom: false,\n  staticTop: false,\n  inverse: false,\n  fluid: false,\n  collapseOnSelect: false\n};\nvar childContextTypes = {\n  $bs_navbar: _propTypes.default.shape({\n    bsClass: _propTypes.default.string,\n    expanded: _propTypes.default.bool,\n    onToggle: _propTypes.default.func.isRequired,\n    onSelect: _propTypes.default.func\n  })\n};\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Navbar, _React$Component);\n\n  function Navbar(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handleToggle = _this.handleToggle.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleCollapse = _this.handleCollapse.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n\n  var _proto = Navbar.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    var _this$props = this.props,\n        bsClass = _this$props.bsClass,\n        expanded = _this$props.expanded,\n        onSelect = _this$props.onSelect,\n        collapseOnSelect = _this$props.collapseOnSelect;\n    return {\n      $bs_navbar: {\n        bsClass: bsClass,\n        expanded: expanded,\n        onToggle: this.handleToggle,\n        onSelect: (0, _createChainedFunction.default)(onSelect, collapseOnSelect ? this.handleCollapse : null)\n      }\n    };\n  };\n\n  _proto.handleCollapse = function handleCollapse() {\n    var _this$props2 = this.props,\n        onToggle = _this$props2.onToggle,\n        expanded = _this$props2.expanded;\n\n    if (expanded) {\n      onToggle(false);\n    }\n  };\n\n  _proto.handleToggle = function handleToggle() {\n    var _this$props3 = this.props,\n        onToggle = _this$props3.onToggle,\n        expanded = _this$props3.expanded;\n    onToggle(!expanded);\n  };\n\n  _proto.render = function render() {\n    var _extends2;\n\n    var _this$props4 = this.props,\n        Component = _this$props4.componentClass,\n        fixedTop = _this$props4.fixedTop,\n        fixedBottom = _this$props4.fixedBottom,\n        staticTop = _this$props4.staticTop,\n        inverse = _this$props4.inverse,\n        fluid = _this$props4.fluid,\n        className = _this$props4.className,\n        children = _this$props4.children,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props4, [\"componentClass\", \"fixedTop\", \"fixedBottom\", \"staticTop\", \"inverse\", \"fluid\", \"className\", \"children\"]);\n\n    var _splitBsPropsAndOmit = (0, _bootstrapUtils.splitBsPropsAndOmit)(props, ['expanded', 'onToggle', 'onSelect', 'collapseOnSelect']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1]; // will result in some false positives but that seems better\n    // than false negatives. strict `undefined` check allows explicit\n    // \"nulling\" of the role if the user really doesn't want one\n\n\n    if (elementProps.role === undefined && Component !== 'nav') {\n      elementProps.role = 'navigation';\n    }\n\n    if (inverse) {\n      bsProps.bsStyle = _StyleConfig.Style.INVERSE;\n    }\n\n    var classes = (0, _extends3.default)({}, (0, _bootstrapUtils.getClassSet)(bsProps), (_extends2 = {}, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'fixed-top')] = fixedTop, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'fixed-bottom')] = fixedBottom, _extends2[(0, _bootstrapUtils.prefix)(bsProps, 'static-top')] = staticTop, _extends2));\n    return _react.default.createElement(Component, (0, _extends3.default)({}, elementProps, {\n      className: (0, _classnames.default)(className, classes)\n    }), _react.default.createElement(_Grid.default, {\n      fluid: fluid\n    }, children));\n  };\n\n  return Navbar;\n}(_react.default.Component);\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\nNavbar.childContextTypes = childContextTypes;\n(0, _bootstrapUtils.bsClass)('navbar', Navbar);\nvar UncontrollableNavbar = (0, _uncontrollable.default)(Navbar, {\n  expanded: 'onToggle'\n});\n\nfunction createSimpleWrapper(tag, suffix, displayName) {\n  var Wrapper = function Wrapper(_ref, _ref2) {\n    var Component = _ref.componentClass,\n        className = _ref.className,\n        pullRight = _ref.pullRight,\n        pullLeft = _ref.pullLeft,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"componentClass\", \"className\", \"pullRight\", \"pullLeft\"]);\n    var _ref2$$bs_navbar = _ref2.$bs_navbar,\n        navbarProps = _ref2$$bs_navbar === void 0 ? {\n      bsClass: 'navbar'\n    } : _ref2$$bs_navbar;\n    return _react.default.createElement(Component, (0, _extends3.default)({}, props, {\n      className: (0, _classnames.default)(className, (0, _bootstrapUtils.prefix)(navbarProps, suffix), pullRight && (0, _bootstrapUtils.prefix)(navbarProps, 'right'), pullLeft && (0, _bootstrapUtils.prefix)(navbarProps, 'left'))\n    }));\n  };\n\n  Wrapper.displayName = displayName;\n  Wrapper.propTypes = {\n    componentClass: _elementType.default,\n    pullRight: _propTypes.default.bool,\n    pullLeft: _propTypes.default.bool\n  };\n  Wrapper.defaultProps = {\n    componentClass: tag,\n    pullRight: false,\n    pullLeft: false\n  };\n  Wrapper.contextTypes = {\n    $bs_navbar: _propTypes.default.shape({\n      bsClass: _propTypes.default.string\n    })\n  };\n  return Wrapper;\n}\n\nUncontrollableNavbar.Brand = _NavbarBrand.default;\nUncontrollableNavbar.Header = _NavbarHeader.default;\nUncontrollableNavbar.Toggle = _NavbarToggle.default;\nUncontrollableNavbar.Collapse = _NavbarCollapse.default;\nUncontrollableNavbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');\nUncontrollableNavbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');\nUncontrollableNavbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink'); // Set bsStyles here so they can be overridden.\n\nvar _default = (0, _bootstrapUtils.bsStyles)([_StyleConfig.Style.DEFAULT, _StyleConfig.Style.INVERSE], _StyleConfig.Style.DEFAULT, UncontrollableNavbar);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}